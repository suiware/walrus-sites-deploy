{"version":3,"sources":["../src/deploy.ts","../src/utils.ts","../src/index.ts"],"names":["path","chalk"],"mappings":"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","file":"index.js","sourcesContent":["import EnvFileWriter from 'env-file-rw'\nimport { exec, execSync } from 'node:child_process'\nimport { promises } from 'node:fs'\nimport path from 'node:path'\n\ntype Network = 'testnet' | 'mainnet'\n\nconst WALRUS_SITE_OBJECT_ID_VARIABLE_NAME_BASE = 'WALRUS_SITE_OBJECT_ID'\n\nexport const deploy = async (\n  sourceFolder: string,\n  network: Network,\n  siteObjectIdFile: string,\n  epochs: string,\n  buyWalBeforeRun: boolean,\n  forceUpdate: boolean\n) => {\n  if (buyWalBeforeRun) {\n    buyWalTokenIfPossible(network)\n  }\n\n  const configFilePathFull = path.join(process.cwd(), siteObjectIdFile)\n  const sitePathFull = path.join(process.cwd(), sourceFolder)\n\n  await createFileIfNecessary(configFilePathFull)\n\n  let siteObjectId = await readSiteObjectId(configFilePathFull, network)\n\n  // If the site has not yet been published (no site object ID in the config),\n  // then publish the site to Walrus Sites.\n  if (siteObjectId == null) {\n    console.log('Publishing the app to Walrus Sites...')\n    const { stdout, stderr } = await exec(\n      `${getWalrusSitesCli(network)} publish --epochs ${epochs} ${sitePathFull}`\n    )\n\n    // Get the site object ID from the publish command output.\n    stdout!.on('data', async (data) => {\n      console.log(data)\n\n      const regex = /New site object ID: (.+)/\n      const result = data.match(regex)\n\n      // If the line doesn't have site object ID, ignore it.\n      if (result == null) {\n        return\n      }\n\n      siteObjectId = result[1].trim()\n\n      // Save site object ID to the config file.\n      await saveSiteObjectId(configFilePathFull, network, siteObjectId!)\n    })\n\n    stderr!.on('data', async (error) => {\n      console.error(error)\n      // Do not exit if it's a warning.\n      // @todo: Find a better way to catch warnings, e.g. by severity level or error code.\n      if (error.startsWith('[warn]')) {\n        return\n      }\n      process.exit()\n    })\n\n    return\n  }\n\n  if (siteObjectId == null) {\n    console.error(\n      '~ The script could not find the site object ID in the output.'\n    )\n    console.error(\n      '~ If you see it, please add WALRUS_SITE_OBJECT_ID=[site object ID from the output] into packages/frontend/.env.local manually.'\n    )\n    return\n  }\n\n  console.log('Updating the app on Walrus Sites...')\n  execSync(\n    `${getWalrusSitesCli(network)} update ${forceUpdate ? '--force' : ''} --epochs ${epochs} ${sitePathFull} ${siteObjectId}`,\n    { stdio: 'inherit' }\n  )\n}\n\n/**\n * Read Walrus site object ID from .env.local.\n *\n * @param {string} configFilePath\n * @param {string} network\n * @returns\n */\nconst readSiteObjectId = async (configFilePath: string, network: Network) => {\n  const envFileWriter = new EnvFileWriter(configFilePath, false)\n  await envFileWriter.parse()\n  return envFileWriter.get(getWalrusObjectIdVariableName(network), null)\n}\n\n/**\n * Save Walrus site object ID t0.env.local.\n *\n * @param {string} configFilePath\n * @param {string} network\n * @param {string} siteObjectId\n * @returns\n */\nconst saveSiteObjectId = async (\n  configFilePath: string,\n  network: Network,\n  siteObjectId: string\n) => {\n  await setEnvVar(\n    configFilePath,\n    getWalrusObjectIdVariableName(network),\n    siteObjectId\n  )\n}\n\n/**\n * Create a file if it doesn't exist.\n *\n * @param {string} filePath\n * @returns\n */\nconst createFileIfNecessary = async (filePath: string) => {\n  try {\n    await promises.writeFile(filePath, '', { flag: 'wx' })\n  } catch {}\n}\n\n/**\n * Set the environment variable in the .env.local file.\n *\n * @param {string} envFilePath\n * @param {string} name\n * @param {string} value\n * @returns\n */\nconst setEnvVar = async (envFilePath: string, name: string, value: string) => {\n  const envFileWriter = new EnvFileWriter(envFilePath, false)\n  await envFileWriter.parse()\n  envFileWriter.set(name, value)\n  await envFileWriter.save()\n}\n\nconst buyWalTokenIfPossible = (network: Network) => {\n  try {\n    console.log('Buying WAL coins...')\n    execSync(`${getWalrusCli(network)} get-wal`, {\n      stdio: 'inherit',\n    })\n  } catch (e) {\n    console.warn(e)\n  }\n}\n\nconst getWalrusCli = (network: Network) => {\n  return network === 'mainnet' ? 'mwalrus' : 'twalrus'\n}\nconst getWalrusSitesCli = (network: Network) => {\n  return network === 'mainnet' ? 'msite' : 'tsite'\n}\n\nconst getWalrusObjectIdVariableName = (network: Network) => {\n  return `${WALRUS_SITE_OBJECT_ID_VARIABLE_NAME_BASE}_${network.toUpperCase()}`\n}\n","import chalk from 'chalk'\nimport { readFileSync } from 'fs'\nimport path from 'path'\nimport { fileURLToPath } from 'url'\n\nexport const getCliDirectory = () => {\n  const currentFileUrl = import.meta.url\n  return path.dirname(decodeURI(fileURLToPath(currentFileUrl)))\n}\n\nexport const getPackageMeta = () => {\n  try {\n    const packageFile = readFileSync(\n      path.join(getCliDirectory(), '/package.json'),\n      'utf8'\n    )\n    return JSON.parse(packageFile)\n  } catch (e) {\n    displayErrorMessage(`Cannot read package meta-data.`)\n    console.error(e)\n    process.exit(1)\n  }\n}\n\nexport const displayErrorMessage = (message: string) => {\n  console.error(chalk.red(message))\n}\n\nexport const displaySuccessMessage = (message: string) => {\n  console.log(chalk.green(message))\n}\n","#!/usr/bin/env node\n\nimport chalk from 'chalk'\nimport { Command } from 'commander'\nimport { deploy } from './deploy'\nimport { displaySuccessMessage, getPackageMeta } from './utils'\n\n/**\n * The script publishes to or updates the app on Walrus Sites.\n * After publishing the app, site object ID is copied to .env.local, which is used later to update the app on Walrus Sites.\n * See Configuration section below for more details.\n */\n\nconst main = async () => {\n  const packageMeta = getPackageMeta()\n\n  const program = new Command()\n\n  program\n    .name(packageMeta.name)\n    .description(packageMeta.description)\n    .version(packageMeta.version)\n\n  program\n    .command('deploy <source>', { isDefault: true })\n    .description(`Deploy a folder to Walrus Sites`)\n    .option('-n, --network [network]', 'network to use (testnet or mainnet)', 'testnet')\n    .option(\n      '-o, --site-object-id-file [siteObjectIdFile]',\n      'path to the config file where the site object ID is stored',\n      './.env.local'\n    )\n    .option(\n      '-e, --epochs [epochs]',\n      'number of epochs to store the files for. \"max\" means 53 epochs or (2 years).',\n      '1'\n    )\n    .option(\n      '-b, --buy-wal-before-run [true]',\n      'buy WAL tokens before running the script. currently 0.5 WAL.',\n    )\n    .option(\n      '-f, --force-update [true]',\n      'force update',\n    )\n\n    // .option('-v, --verbose', 'display logs')\n    .action(async (source, options) => {\n      await deploy(\n        source,\n        options.network,\n        options.siteObjectIdFile,\n        options.epochs,\n        options?.buyWalBeforeRun || false,\n        options?.forceUpdate || false\n      )\n\n      displaySuccessMessage(`The site has been deployed.`)\n    })\n\n  program.parse()\n}\n\n// Main entry point.\nmain().catch((e) => {\n  console.error(chalk.red(e))\n})\n"]}